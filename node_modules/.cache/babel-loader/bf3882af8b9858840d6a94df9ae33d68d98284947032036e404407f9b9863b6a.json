{"ast":null,"code":"import { createSlice, configureStore } from '@reduxjs/toolkit';\nconst initialState = {\n  cart: [],\n  cartIsVisible: false\n};\nexport const cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addToCart(state, payload) {\n      const alreadyExistingItemIndex = state.cart.findIndex(item => item.id === payload.item.id);\n      const alreadyExistingItem = state.cart[alreadyExistingItemIndex];\n      let updatedItems;\n      if (alreadyExistingItem) {\n        return state;\n      } else {\n        updatedItems = state.cart.concat(payload.item);\n        return state.cart = updatedItems;\n      }\n    },\n    changeCartAmount(state, payload) {\n      const alreadyExistingItemIndex = state.cart.findIndex(item => item.id === payload.item.id);\n      ++state.cart[alreadyExistingItemIndex].amount;\n    },\n    showCart(state) {\n      state.cartIsVisible = !state.cartIsVisible;\n    }\n  }\n});\nconst store = configureStore({\n  reducer: cartSlice.reducer\n});\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","initialState","cart","cartIsVisible","cartSlice","name","reducers","addToCart","state","payload","alreadyExistingItemIndex","findIndex","item","id","alreadyExistingItem","updatedItems","concat","changeCartAmount","amount","showCart","store","reducer"],"sources":["C:/Code/Max/Redux_practice/src/components/redux/index.js"],"sourcesContent":["import {createSlice, configureStore} from '@reduxjs/toolkit'\r\n\r\nconst initialState = {cart: [],\r\ncartIsVisible: false}\r\n\r\nexport const cartSlice = createSlice({\r\n    name: 'cart',\r\n    initialState,\r\n    reducers: {\r\n        addToCart(state, payload) {\r\n          const alreadyExistingItemIndex = state.cart.findIndex(\r\n            (item) => item.id === payload.item.id\r\n          );\r\n          const alreadyExistingItem = state.cart[alreadyExistingItemIndex];\r\n          let updatedItems;\r\n          if (alreadyExistingItem) {\r\n            return state\r\n          } else {\r\n            updatedItems = state.cart.concat(payload.item);\r\n            return state.cart = updatedItems\r\n          }\r\n        },\r\n        changeCartAmount(state, payload) {\r\n            const alreadyExistingItemIndex = state.cart.findIndex(\r\n                (item) => item.id === payload.item.id\r\n              );\r\n            ++state.cart[alreadyExistingItemIndex].amount\r\n        },\r\n        showCart(state) {state.cartIsVisible = !state.cartIsVisible}\r\n    }\r\n})\r\n\r\nconst store = configureStore({\r\n    reducer: cartSlice.reducer\r\n})\r\n\r\nexport default store"],"mappings":"AAAA,SAAQA,WAAW,EAAEC,cAAc,QAAO,kBAAkB;AAE5D,MAAMC,YAAY,GAAG;EAACC,IAAI,EAAE,EAAE;EAC9BC,aAAa,EAAE;AAAK,CAAC;AAErB,OAAO,MAAMC,SAAS,GAAGL,WAAW,CAAC;EACjCM,IAAI,EAAE,MAAM;EACZJ,YAAY;EACZK,QAAQ,EAAE;IACNC,SAASA,CAACC,KAAK,EAAEC,OAAO,EAAE;MACxB,MAAMC,wBAAwB,GAAGF,KAAK,CAACN,IAAI,CAACS,SAAS,CAClDC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,OAAO,CAACG,IAAI,CAACC,EACrC,CAAC;MACD,MAAMC,mBAAmB,GAAGN,KAAK,CAACN,IAAI,CAACQ,wBAAwB,CAAC;MAChE,IAAIK,YAAY;MAChB,IAAID,mBAAmB,EAAE;QACvB,OAAON,KAAK;MACd,CAAC,MAAM;QACLO,YAAY,GAAGP,KAAK,CAACN,IAAI,CAACc,MAAM,CAACP,OAAO,CAACG,IAAI,CAAC;QAC9C,OAAOJ,KAAK,CAACN,IAAI,GAAGa,YAAY;MAClC;IACF,CAAC;IACDE,gBAAgBA,CAACT,KAAK,EAAEC,OAAO,EAAE;MAC7B,MAAMC,wBAAwB,GAAGF,KAAK,CAACN,IAAI,CAACS,SAAS,CAChDC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,OAAO,CAACG,IAAI,CAACC,EACrC,CAAC;MACH,EAAEL,KAAK,CAACN,IAAI,CAACQ,wBAAwB,CAAC,CAACQ,MAAM;IACjD,CAAC;IACDC,QAAQA,CAACX,KAAK,EAAE;MAACA,KAAK,CAACL,aAAa,GAAG,CAACK,KAAK,CAACL,aAAa;IAAA;EAC/D;AACJ,CAAC,CAAC;AAEF,MAAMiB,KAAK,GAAGpB,cAAc,CAAC;EACzBqB,OAAO,EAAEjB,SAAS,CAACiB;AACvB,CAAC,CAAC;AAEF,eAAeD,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}